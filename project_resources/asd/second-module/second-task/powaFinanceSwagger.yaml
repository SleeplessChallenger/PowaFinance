openapi: 3.0.3
info:
  title: PowaFinance - OpenAPI 3.0
  contact:
    email: dvslobodenyuk@edu.hse.ru
  description: |- 
    This spec is done in Swagger and based on OpenApi specification.
    Useful links regarding our project
      - [PowaFinance repo](https://github.com/SleeplessChallenge/PowaFinance)
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://powafinance.swagger.io/api/v3
tags:
  - name: finance app
    description: Keep your finances up to sleeve
    externalDocs:
      description: Find out more
      url: https://docs.google.com/presentation/d/1a3r0QD-XLHqMK7llkxzXCF_Zj7aH9DMR/edit?usp=sharing&ouid=110373371490262693970&rtpof=true&sd=true
  - name: PowaFinance
    description: Access to financial freedom
    externalDocs:
      description: Find out more about our store
      url: https://docs.google.com/presentation/d/1a3r0QD-XLHqMK7llkxzXCF_Zj7aH9DMR/edit?usp=sharing&ouid=110373371490262693970&rtpof=true&sd=true
  - name: user
    description: Operations about user
  - name: expenses
    description: Access to all the expenses of the user
  - name: projection
    description: Access to the projection of expenses for the next quarter
  - name: ml-model
    description: AWS service which makes the prediction

components:
  securitySchemes:
    powaFinanceAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            read_data: read all data from you account
            write_data: write all data to your account
security: # to apply security globally
  powaFinanceAuth: [read_data, write_data]

paths:
  /my-expenses/{userId}:
    get:
      tags:
        - Expenses
      summary: Retrieves expenses for the user
      description: Retrieves all the expenses for the user
      operationId: getExpenses
      parameters:
        - in: query
          name: expense-size
          description: Param to limit amount of expenses presented for the user (will be newest to oldest)
          required: false
          schema:
            type: string
            default: 50
        - in: path
          name: userId
          description: Param to specify the particular user
          required: true
          schema:
            type: string
            default: no
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: id of the user that was used for retrieval
                  expense_id:
                    type: integer
                    description: id of the particular expense
                  sum:
                    type: number
                    multipleOf: 0.1
                    description: The sum of the particular expense
                  createdDate:
                    type: string
                    format: date
        '400':
          description: Invalid ID supplied
        '404':
          description: No expenses found
    post:
      tags:
        - Expenses
      summary: Add new expense
      description: Add a new expense to the system
      operationId: postExpense
      parameters:
        - in: path
          name: userId
          description: Param to specify the particular user
          required: true
          schema:
            type: string
            default: no
      requestBody:
        description: Create new expense for the user that will be added to the database
        content:
          application/json:
            schema:
              type: object
              properties:
                sum:
                  type: number
                  multipleOf: 0.1
                  description: The sum of the particular expense
                createdDate:
                  type: string
                  format: date
        required: true
      responses:
        '200':
          description: Expense added successfully
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: id of the user not found
        '405':
          description: Invalid input

  /project-expenses/{userId}:
    get:
      tags:
        - Project expenses
      summary: Get projection for expenses
      description: Use Expenses microservice for retrieving data and AWS service\
        for prediction
      operationId: projectAllExpenses
      parameters:
        - name: userId
          in: path
          description: Path param to identify the user
          required: true
          schema:
            type: string
            default: no
      responses:
        '200'
          description: successfully projected expenses for the next quarter
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: id of the prediction
                  predicted_sum:
                    type: number
                    multipleOf: 0.1
                  predicted_range:
                    type: string
                    format: date
        '400':
          description: Not enough data for prediction
        '404':
          description: Unique identifier for the user is not provided
  /login
    post:
      tags:
        - Login
      summary: Endpoint to login/register
      description: Login to the service + background authentization and authorization
      operationId: loginEndpoint
      requestBody:
        description: Login/Register ability for the user
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: login of the user in the system
                password:
                  type: string # actually, we hash it
                  description: hash of the password for the user
      responses:
        '200':
            description: successful login/register
            # As we use OAuth2, we don't need any headers
        '400':
          description: invalid data provided
  /logout:
    get:
      tags:
        - Logout
      summary: Endpoint to logout of the account
      description: This endpoint allows user to logout from the account
      operationId: logoutEndpoint
      responses:
        '200':
           text/plain:
            schema:
              type: string
        '400':
            description: Network issues